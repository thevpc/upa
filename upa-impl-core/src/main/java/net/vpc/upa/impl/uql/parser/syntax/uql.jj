options {
  LOOKAHEAD = 1;
  IGNORE_CASE = true;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;

  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(UQLParser)
package net.vpc.upa.impl.uql.parser.syntax;
import net.vpc.upa.PortabilityHint;
import net.vpc.upa.expressions.*;
import net.vpc.upa.impl.util.*;
import java.util.ArrayList;
import java.util.List;
/** UQL parser. */
@PortabilityHint(target = "C#",name = "suppress")
public class UQLParser {

  private String getIdentifierName(Token t){
    if(t==null){
        return null;
    }
    String s=t.image;
    if(s.startsWith("`")){
        return StringUtils.unescapeString(s.substring(1,s.length()-1));
    }else{
      return s;
    }
  }

  private String getStringLiteral(Token t){
    String s=t.image;
    return StringUtils.unescapeString(s.substring(1,s.length()-1));
  }
}

PARSER_END(UQLParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : 
{
   < SELECT: "select" >
 |
   < UPDATE: "update" >
 |
   < DELETE: "delete" >
 |
   < INSERT: "insert" >
 |
   < SET: "set" >
 |
   < FROM: "from" >
 |
   < WHERE: "where" >
 |
   < AND: "and" >
 |
   < OR: "or" >
 |
   < IF: "if" >
 |
   < THEN: "then" >
 |
   < SWITCH: "switch" >
 |
   < CASE: "case" >
 |
   < ELSE: "else" >
 |
   < ELSEIF: "elseif" >
 |
   < END: "end" >
 |
   < TRUE: "true" >
 |
   < FALSE: "false" >
 |
   < NULL: "null" >
 |
   < ORDER: "order" >
 |
   < GROUP: "group" >
 |
   < BY: "by" >
 |
   < DESC: "desc" >
 |
   < ASC: "asc" >
 |
   < INNER: "inner" >
 |
   < LEFT: "left" >
 |
   < RIGHT: "right" >
 |
   < FULL: "full" >
 |
   < CROSS: "cross" >
 |
   < JOIN: "join" >
 |
   < HAVING: "having" >
 |
   < ON: "on" >
 |
   < NOT: "not" >
 |
   < LIKE: "like" >
 |
   < IN: "in" >
 |
   < DISTINCT: "distinct" >
 |
   < TOP: "top" >
// |
//   < EXISTS: "exists" >
}

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: 
    (
      "`"
      (   (~["`","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "`"
    )
    | (<LETTER> (<PART_LETTER>)*)
>
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "$",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < EQ2: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < NE2: "<>" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
}

Expression Any() :
{
    Expression r;
}
{
    (
        LOOKAHEAD(<SELECT>) r=Select()
    |
        LOOKAHEAD(<UPDATE>) r=Update()
    |
        LOOKAHEAD(<DELETE>) r=Delete()
    |
        r=Expression()
    )
   <EOF>
    {
        return r;
    }
}


/*
 * Program structuring syntax follows.
 *  Select e from (select 1 from x)
 */

/** Compilation unit. */
Select Select() :
{
    Select r=new Select();
    List<DecoratedExpression> exprList=null;
    List<JoinCriteria> joinList=null;
    List<Expression> groupByList=null;
    Expression having=null;
    Select fromSelect=null;
    boolean distinct=false;
    Token fromToken=null;
    Token fromAlias=null;
    Expression where=null;
    List<DecoratedExpression> orderList=null;
    Token t;
    int top=-1;
}
{
    <SELECT> 
    (
        <TOP> 
        t=<INTEGER_LITERAL>
          {
              top=(Integer.parseInt(t.image));
          }
    )?
    (<DISTINCT> {distinct=true;})?
   exprList=NamedExpressionList()
    ( <FROM> 
            (
                fromToken=<IDENTIFIER> (fromAlias= <IDENTIFIER>)?
                |
                "(" fromSelect=Select() ")" fromAlias=<IDENTIFIER>
            )
    )?
    (joinList=JoinList())?
    ( <WHERE> where=Expression() )?
    ( <GROUP> <BY> groupByList=ExpressionList() )?
    ( <HAVING> having=Expression() )?
    ( <ORDER> <BY> orderList=OrderExpressionList() )?
    {
        if(fromToken!=null){
            r.from(getIdentifierName(fromToken),getIdentifierName(fromAlias));
        }else if(fromSelect!=null){
            r.from(fromSelect,getIdentifierName(fromAlias));
        }
        if(where !=null){
            r.where(where);
        }
        if(exprList!=null){
            for(DecoratedExpression ns:exprList){
                r.field(ns.expression,ns.alias);
            }
        }
        if(orderList!=null){
            for(DecoratedExpression ns:orderList){
                r.orderBy(ns.expression,!ns.desc);
            }
        }
        if(joinList!=null){
            for(JoinCriteria ns:joinList){
                r.join(ns);
            }
        }
        if(groupByList!=null){
            for(Expression ns:groupByList){
                r.groupBy(ns);
            }
        }
        if(having!=null){
            r.having(having);
        }
        if(distinct){
            r.distinct();
        }
        r.top(top);
        return r;
    }
}

//Exists Exists() :
//{
//    Expression expr=null;
//}
//{
//    <EXISTS>
//    <LPAREN>{
//        expr=Expression();
//    }
//    <RPAREN>
//    {
//        return new Exists(expr);
//    }
//}

Update Update() :
{
    Update r=new Update();
    Token entityToken=null;
    Token fieldToken=null;
    Expression fieldValue=null;
    Expression where=null;
}
{
    <UPDATE> 
    entityToken=<IDENTIFIER>
    {
        r.entity(getIdentifierName(entityToken));
    }
   <SET> 
    fieldToken=<IDENTIFIER> <EQ> fieldValue=Expression()
    {
        r.set(getIdentifierName(fieldToken),fieldValue);
    }
    (   LOOKAHEAD(<IDENTIFIER>)
        fieldToken=<IDENTIFIER> <EQ> fieldValue=Expression()
        {
            r.set(getIdentifierName(entityToken),fieldValue);
        }
    )*
    ( <WHERE> where=Expression()
            {
                r.where(where);
            }
    )?
    {
        return r;
    }
}


Delete Delete() :
{
    Delete r=new Delete();
    Token entityToken=null;
    Expression where=null;
}
{
    <DELETE> 
    <FROM> 
    entityToken=<IDENTIFIER>
    {
        r.from(getIdentifierName(entityToken));
    }
    ( <WHERE> where=Expression()
            {
                r.where(where);
            }
    )?
    {
        return r;
    }
}

List<JoinCriteria> JoinList() :
{
    List<JoinCriteria> r=new ArrayList<JoinCriteria>();
    JoinCriteria r0;
    JoinCriteria ri;
}
{
    r0=JoinDec()
    {
        r.add(r0);
    }  
    ( LOOKAHEAD(JoinLookAhead())
        ri=JoinDec()
        {
            r.add(ri);
        }
    )*
    {
        return r;
    }
}

void JoinLookAhead() :
{
}
{
        <INNER> 
        |
        <LEFT> 
        |
        <RIGHT> 
        |
        <FULL> 
        |
        <CROSS> 
}

JoinCriteria JoinDec() :
{
    JoinType type=JoinType.CROSS_JOIN;
    Expression condition=null;
    Token fromAlias=null;
    Token fromToken=null;
    Select fromSelect=null;
}
{
    (
        <INNER> {type=JoinType.INNER_JOIN;}
        |
        <LEFT> {type=JoinType.LEFT_JOIN;}
        |
        <RIGHT> {type=JoinType.RIGHT_JOIN;}
        |
        <FULL> {type=JoinType.FULL_JOIN;}
        |
        <CROSS> {type=JoinType.CROSS_JOIN;}
    )
    <JOIN>
        (
            fromToken=<IDENTIFIER> (fromAlias= <IDENTIFIER>)?
            |
            "(" fromSelect=Select() ")" fromAlias=<IDENTIFIER>
        )
    (
        <ON>
        condition=Expression()
    )?
    {
        return new JoinCriteria(type,
            (fromToken !=null)? (NameOrQuery)new EntityName(getIdentifierName(fromToken)):(NameOrQuery)fromSelect,
            getIdentifierName(fromAlias),
            condition
        );
    }
}


List<DecoratedExpression> NamedExpressionList() :
{
    List<DecoratedExpression> r=new ArrayList<DecoratedExpression>();
    DecoratedExpression r0;
    DecoratedExpression ri;
}
{
    r0=NamedExpression()
    {
        r.add(r0);
    }  
    (
        "," 
        ri=NamedExpression()
        {
            r.add(ri);
        }
    )*
    {
        return r;
    }
}

List<DecoratedExpression> OrderExpressionList() :
{
    List<DecoratedExpression> r=new ArrayList<DecoratedExpression>();
    DecoratedExpression r0;
    DecoratedExpression ri;
}
{
    r0=OrderExpression()
    {
        r.add(r0);
    }  
    ("," 
        ri=OrderExpression()
        {
            r.add(ri);
        }
    )*
    {
        return r;
    }
}


DecoratedExpression OrderExpression() :
{
    DecoratedExpression r=new DecoratedExpression();
    boolean orderDesc=false;
}
{
    (r.expression=Expression()) (<DESC> {orderDesc=true;} | <ASC> {orderDesc=false;})?
    {
        r.desc=orderDesc;
        return r;
    }
}

DecoratedExpression NamedExpression() :
{
    DecoratedExpression r=new DecoratedExpression();
    Token t=null;
}
{
    (<STAR> (<DOT> t=<IDENTIFIER>)?)
    {
        Star p=new Star();
        Var v;
        if(t!=null){
            v=new Var(p,getIdentifierName(t));
            r.expression=v;
        }else{
            r.expression=p;
        }
        return r;
    }
    |
    (r.expression=Expression() (t=<IDENTIFIER>)?)
    {
        if(t!=null){
            r.alias=getIdentifierName(t);
        }
        return r;
    }
}

List<Expression> ExpressionList() :
{
    List<Expression> r=new ArrayList<Expression>();
    Expression r0;
    Expression ri;
}
{
    r0=ExpressionOrSelect()
    {
        r.add(r0);
    }
    (","
        ri=ExpressionOrSelect()
        {
            r.add(ri);
        }
    )*
    {
        return r;
    }
}

Expression ExpressionOrSelect() :
{
    Expression r;
}
{
        (
        LOOKAHEAD(<SELECT>)
        (
            r=Select()
        )
        |
        r=Expression()
        )
        {
            return r;
        }
}


Expression Expression() :
{
    Expression r;
}
{
        (
//        LOOKAHEAD(<SELECT>)
//        (
//            r=Select()
//        )
//        |
//        LOOKAHEAD(<EXISTS>)
//        (
//            r=Exists()
//        )
//        |
        r=OrExpression()
        )
        {
            return r;
        }
}

Expression OrExpression() :
{
    Expression left;
    Expression right=null;
}
{
    left=AndExpression()
    (
        (
            <OR> 
            | <SC_OR>
        )
        right=AndExpression()
        {
            left=new Or(left,right);
        }
    )*
    {
        return left;
    }
}


Expression AndExpression() :
{
    Expression left;
    Expression right=null;
}
{
    left=CompExpression()
    (
        (
              <AND> 
            | <SC_AND> 
        )
        right=CompExpression()
        {
            left=new And(left,right);
        }
    )*
    {
        return left;
    }
}


Expression CompExpression() :
{
    Expression r;
    Expression n;
    BinaryOperator op;
    List<Expression> parameters=null;
}
{
    r=PlusExpression()
    (
        LOOKAHEAD(<IN>)
        (
            <IN>
            <LPAREN>
            ( 
                    parameters=ExpressionList()
            )   
            <RPAREN>
            {
                if(parameters.size()==1 && parameters.get(0) instanceof Select){
                    r=new InSelection(r,(Select)parameters.get(0));
                }else{
                    r=new InCollection(r,parameters);
                }
                parameters=null;
            }
        )
        |
        LOOKAHEAD(<EQ> | <EQ2> | <NE> | <NE2> | <LT> | <LE> | <GE> | <GT> | <LIKE>)
        (
        (
              <EQ> {op=BinaryOperator.EQ;}
            | <EQ2> {op=BinaryOperator.EQ;}
            | <NE> {op=BinaryOperator.DIFF;}
            | <NE2> {op=BinaryOperator.DIFF;}
            | <LT> {op=BinaryOperator.LT;}
            | <LE> {op=BinaryOperator.LE;}
            | <GT> {op=BinaryOperator.GT;}
            | <GE> {op=BinaryOperator.GE;}
            | <LIKE> {op=BinaryOperator.LIKE;}
        )
        n=PlusExpression()
        {
            switch(op){
                case EQ: { r=new Equals(r,n); break;}
                case DIFF: { r=new Different(r,n); break;}
                case LT: { r=new LessThan(r,n); break;}
                case LE: { r=new LessEqualThan(r,n); break;}
                case GT: { r=new GreaterThan(r,n); break;}
                case GE: { r=new GreaterEqualThan(r,n); break;}
                case LIKE: { r=new Like(r,n); break;}
            }
        }
        )
    )?
    {
        return r;
    }
}


Expression PlusExpression() :
{
    Expression left;
    Expression right;
    BinaryOperator op;
}
{
    left=MulExpression()
    (
        (
            (
                  <PLUS> {op=BinaryOperator.PLUS;}
                | <MINUS> {op=BinaryOperator.MINUS;}
            )
            right=MulExpression()
        )
        {
            switch(op){
                case PLUS: { left=new Plus(left,right);break;}
                case MINUS: { left=new Minus(left,right);break;}
            }
        }
    )*
    {
        return left;
    }
}


Expression MulExpression() :
{
    Expression left;
    Expression right;
    BinaryOperator op;
}
{
    left=PowExpression()
    (
        (
            (
                  <SLASH> {op=BinaryOperator.DIV;}
                | <STAR> {op=BinaryOperator.MUL;}
                | <REM> {op=BinaryOperator.REM;}
            )
            right=PowExpression()
        )
        {
            switch(op){
                case DIV: { left=new Div(left,right); break;}
                case MUL: { left=new Mul(left,right); break;}
                case REM: { left=new Reminder(left,right); break;}
            }
        }
    )*
    {
        return left;
    }
}

Expression PowExpression() :
{
    Expression left;
    Expression right;
    BinaryOperator op;
}
{
    left=PrimaryExpression()
    (
        (
              <BIT_AND> {op=BinaryOperator.BIT_AND;}
            | <BIT_OR> {op=BinaryOperator.BIT_OR;}
            | <XOR> {op=BinaryOperator.XOR;}
            | <LSHIFT> {op=BinaryOperator.LSHIFT;}
            | <RSIGNEDSHIFT> {op=BinaryOperator.RSHIFT;}
            | <RUNSIGNEDSHIFT> {op=BinaryOperator.URSHIFT;}
        )
        right=PrimaryExpression()
        {
            switch(op){
                case BIT_AND: { left=new BitAnd(left,right);break;}
                case BIT_OR: { left=new BitOr(left,right);break;}
                case XOR: { left=new XOr(left,right);break;}
                case LSHIFT: { left=new LShift(left,right);break;}
                case RSHIFT: { left=new RShift(left,right);break;}
                case URSHIFT: { left=new URShift(left,right);break;}
            }
        }
    )*
    {
       return left;
    }
}

Expression Param() :
{
    Token t=null;
}
{
    <COLON>
    t=<IDENTIFIER>
    {
        return new Param(getIdentifierName(t));
    }
}

Expression VarOrFunction() :
{
    Token t=null;
    Token start;
    boolean fct=false;
    boolean indexer=false;
    List<Expression> parameters=null;
    List<String> vars=new ArrayList<String>();
}
{
    start=<IDENTIFIER>
      (
        LOOKAHEAD(<LPAREN>)
        (
          <LPAREN> 
              (parameters=ExpressionList())?
          <RPAREN>
          {
              fct=true;
          }
        )
      |
        LOOKAHEAD(<LBRACKET>)
        (
          <LBRACKET>
              (parameters=ExpressionList())?
          <RBRACKET>
          {
              indexer=true;
          }
        )
      |
         (
          <DOT> 
              ( t=<IDENTIFIER>
               {
                vars.add(getIdentifierName(t));
               }
              |
               t=<STAR>
               {
                vars.add(getIdentifierName(t));
               }
              )
        )*
    )
    {
        if(fct){
              return FunctionFactory.createFunction(getIdentifierName(start),parameters==null?new ArrayList<Expression>():parameters);
        }else if(indexer){
            if(parameters==null){
                parameters=new ArrayList<Expression>();
            }

            Var v=new IndexedVar(getIdentifierName(start),parameters.toArray(new Expression[parameters.size()]));
            for(String s:vars){
                v=new Var(v,s);
            }
            return v;
        }else{
            Var v=new Var(getIdentifierName(start));
            for(String s:vars){
                v=new Var(v,s);
            }
            return v;
        }
    }
}

Expression PrimaryExpression() :
{
    Expression r;
    boolean isMinus=false;
    boolean isNot=false;
    boolean isTilde=false;
}
{
    (
      <LPAREN> (
            LOOKAHEAD(<SELECT>) 
                r=Select() |
                r=Expression()
        ) <RPAREN>
    | <MINUS> {isMinus=true;} r=PrimaryExpression() 
    | <PLUS>  r=Expression() 
    | <NOT> {isNot=true;}  r=PrimaryExpression() 
    | <TILDE> {isTilde=true;}  r=PrimaryExpression() 
    | LOOKAHEAD(<COLON>) r=Param()
    | LOOKAHEAD(<IF>) r=If()
    | LOOKAHEAD(Literal()) r=Literal()
    | r=VarOrFunction()
    )
    {
        if(isMinus){
            r=new Negative(r);
        } if(isNot){
            r=new Not(r);
        } if(isTilde){
            r=new Complement(r);
        }
        return r;
    }
}


Literal Literal() :
{
    Literal r;
    Token t;
}
{
  (
  t=<INTEGER_LITERAL>
  {
      r=new Literal(Integer.parseInt(t.image));
  }
|
  t=<FLOATING_POINT_LITERAL>
  {
      r=new Literal(Double.parseDouble(t.image));
  }
|
  t=<CHARACTER_LITERAL>
  {
      r=new Literal(getStringLiteral(t));
  }
|
  t=<STRING_LITERAL>
  {
      r=new Literal(getStringLiteral(t));
  }
|
  r=BooleanLiteral()
|
  r=NullLiteral()
 )
  {
    return r;
  }
}

Literal BooleanLiteral() :
{}
{
  <TRUE>
  {return new Literal(true);}
|
  <FALSE>
  {return new Literal(false);}
}

Literal NullLiteral() :
{}
{
  <NULL>
  {return new Literal(null,null);}
}


//
// switch v case x then X case y then Y else Z
//

Expression Switch() :
{
    Expression e;
    List<Expression> expressions=new ArrayList<Expression>();
}
{
    <SWITCH>
    e=Expression()
    {
        expressions.add(e);
    }
    <CASE>
    e=Expression()
    {
        expressions.add(e);
    }
    <THEN>
    e=Expression()
    {
        expressions.add(e);
    }
    ( LOOKAHEAD(1) <CASE> 
        e=Expression() 
        {
            expressions.add(e);
        }
        <THEN>
        e=Expression()
        {
            expressions.add(e);
        }
    )*
    ( LOOKAHEAD(1) <ELSE> 
        e=Expression() 
        {
            expressions.add(e);
        }
    )?
    <END>
    {
        return new Decode(expressions);
    }
}


Expression If() :
{
    Expression e;
    List<Expression> expressions=new ArrayList<Expression>();
}
{
    <IF>
    e=Expression()
    {
        expressions.add(e);
    }
    <THEN>
    e=Expression()
    {
        expressions.add(e);
    }
    ( LOOKAHEAD(1) <ELSEIF> 
        e=Expression() 
        {
            expressions.add(e);
        }
        <THEN>
        e=Expression()
        {
            expressions.add(e);
        }
    )*
    ( LOOKAHEAD(1) <ELSE> 
        e=Expression() 
        {
            expressions.add(e);
        }
    )?
    <END>
    {
        return new If(expressions);
    }
}


Expression Function() :
{
    Token t;
    List<Expression> parameters;
}
{
    t=<IDENTIFIER>
    <LPAREN>
    parameters=ExpressionList()
    <RPAREN>
    {
        return FunctionFactory.createFunction(getIdentifierName(t),parameters);
    }
}


