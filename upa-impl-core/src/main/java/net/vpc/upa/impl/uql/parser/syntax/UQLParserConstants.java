/* Generated By:JavaCC: Do not edit this line. UQLParserConstants.java */
package net.vpc.upa.impl.uql.parser.syntax;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface UQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SELECT = 6;
  /** RegularExpression Id. */
  int UPDATE = 7;
  /** RegularExpression Id. */
  int DELETE = 8;
  /** RegularExpression Id. */
  int INSERT = 9;
  /** RegularExpression Id. */
  int SET = 10;
  /** RegularExpression Id. */
  int FROM = 11;
  /** RegularExpression Id. */
  int WHERE = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int OR = 14;
  /** RegularExpression Id. */
  int IF = 15;
  /** RegularExpression Id. */
  int THEN = 16;
  /** RegularExpression Id. */
  int SWITCH = 17;
  /** RegularExpression Id. */
  int CASE = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int ELSEIF = 20;
  /** RegularExpression Id. */
  int END = 21;
  /** RegularExpression Id. */
  int TRUE = 22;
  /** RegularExpression Id. */
  int FALSE = 23;
  /** RegularExpression Id. */
  int NULL = 24;
  /** RegularExpression Id. */
  int ORDER = 25;
  /** RegularExpression Id. */
  int GROUP = 26;
  /** RegularExpression Id. */
  int BY = 27;
  /** RegularExpression Id. */
  int DESC = 28;
  /** RegularExpression Id. */
  int ASC = 29;
  /** RegularExpression Id. */
  int INNER = 30;
  /** RegularExpression Id. */
  int LEFT = 31;
  /** RegularExpression Id. */
  int RIGHT = 32;
  /** RegularExpression Id. */
  int FULL = 33;
  /** RegularExpression Id. */
  int CROSS = 34;
  /** RegularExpression Id. */
  int JOIN = 35;
  /** RegularExpression Id. */
  int HAVING = 36;
  /** RegularExpression Id. */
  int ON = 37;
  /** RegularExpression Id. */
  int NOT = 38;
  /** RegularExpression Id. */
  int LIKE = 39;
  /** RegularExpression Id. */
  int IN = 40;
  /** RegularExpression Id. */
  int DISTINCT = 41;
  /** RegularExpression Id. */
  int TOP = 42;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 43;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 44;
  /** RegularExpression Id. */
  int HEX_LITERAL = 45;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 46;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 47;
  /** RegularExpression Id. */
  int EXPONENT = 48;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 49;
  /** RegularExpression Id. */
  int STRING_LITERAL = 50;
  /** RegularExpression Id. */
  int IDENTIFIER = 51;
  /** RegularExpression Id. */
  int LETTER = 52;
  /** RegularExpression Id. */
  int PART_LETTER = 53;
  /** RegularExpression Id. */
  int LPAREN = 54;
  /** RegularExpression Id. */
  int RPAREN = 55;
  /** RegularExpression Id. */
  int LBRACE = 56;
  /** RegularExpression Id. */
  int RBRACE = 57;
  /** RegularExpression Id. */
  int LBRACKET = 58;
  /** RegularExpression Id. */
  int RBRACKET = 59;
  /** RegularExpression Id. */
  int SEMICOLON = 60;
  /** RegularExpression Id. */
  int COMMA = 61;
  /** RegularExpression Id. */
  int DOT = 62;
  /** RegularExpression Id. */
  int EQ2 = 63;
  /** RegularExpression Id. */
  int GT = 64;
  /** RegularExpression Id. */
  int LT = 65;
  /** RegularExpression Id. */
  int BANG = 66;
  /** RegularExpression Id. */
  int TILDE = 67;
  /** RegularExpression Id. */
  int HOOK = 68;
  /** RegularExpression Id. */
  int COLON = 69;
  /** RegularExpression Id. */
  int EQ = 70;
  /** RegularExpression Id. */
  int LE = 71;
  /** RegularExpression Id. */
  int GE = 72;
  /** RegularExpression Id. */
  int NE = 73;
  /** RegularExpression Id. */
  int NE2 = 74;
  /** RegularExpression Id. */
  int SC_OR = 75;
  /** RegularExpression Id. */
  int SC_AND = 76;
  /** RegularExpression Id. */
  int INCR = 77;
  /** RegularExpression Id. */
  int DECR = 78;
  /** RegularExpression Id. */
  int PLUS = 79;
  /** RegularExpression Id. */
  int MINUS = 80;
  /** RegularExpression Id. */
  int STAR = 81;
  /** RegularExpression Id. */
  int SLASH = 82;
  /** RegularExpression Id. */
  int BIT_AND = 83;
  /** RegularExpression Id. */
  int BIT_OR = 84;
  /** RegularExpression Id. */
  int XOR = 85;
  /** RegularExpression Id. */
  int REM = 86;
  /** RegularExpression Id. */
  int LSHIFT = 87;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 88;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 89;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"select\"",
    "\"update\"",
    "\"delete\"",
    "\"insert\"",
    "\"set\"",
    "\"from\"",
    "\"where\"",
    "\"and\"",
    "\"or\"",
    "\"if\"",
    "\"then\"",
    "\"switch\"",
    "\"case\"",
    "\"else\"",
    "\"elseif\"",
    "\"end\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"order\"",
    "\"group\"",
    "\"by\"",
    "\"desc\"",
    "\"asc\"",
    "\"inner\"",
    "\"left\"",
    "\"right\"",
    "\"full\"",
    "\"cross\"",
    "\"join\"",
    "\"having\"",
    "\"on\"",
    "\"not\"",
    "\"like\"",
    "\"in\"",
    "\"distinct\"",
    "\"top\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"<>\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
  };

}
