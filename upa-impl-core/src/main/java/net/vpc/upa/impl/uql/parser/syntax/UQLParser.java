/* UQLParser.java */
/* Generated By:JavaCC: Do not edit this line. UQLParser.java */
package net.vpc.upa.impl.uql.parser.syntax;
import net.vpc.upa.PortabilityHint;
import net.vpc.upa.expressions.*;
import net.vpc.upa.impl.util.*;
import java.util.ArrayList;
import java.util.List;
/** UQL parser. */
@PortabilityHint(target = "C#",name = "suppress")
public class UQLParser implements UQLParserConstants {

  private String getIdentifierName(Token t){
    if(t==null){
        return null;
    }
    String s=t.image;
    if(s.startsWith("`")){
        return StringUtils.unescapeString(s.substring(1,s.length()-1));
    }else{
      return s;
    }
  }

  private String getStringLiteral(Token t){
    String s=t.image;
    return StringUtils.unescapeString(s.substring(1,s.length()-1));
  }

  final public Expression Any() throws ParseException {Expression r;
    if (jj_2_1(2147483647)) {
      r = Select();
    } else if (jj_2_2(2147483647)) {
      r = Update();
    } else if (jj_2_3(2147483647)) {
      r = Delete();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case TRUE:
      case FALSE:
      case NULL:
      case NOT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case TILDE:
      case COLON:
      case PLUS:
      case MINUS:{
        r = Expression();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

/*
 * Program structuring syntax follows.
 *  Select e from (select 1 from x)
 */

/** Compilation unit. */
  final public Select Select() throws ParseException {Select r=new Select();
    List<DecoratedExpression> exprList=null;
    List<JoinCriteria> joinList=null;
    List<Expression> groupByList=null;
    Expression having=null;
    Select fromSelect=null;
    boolean distinct=false;
    Token fromToken=null;
    Token fromAlias=null;
    Expression where=null;
    List<DecoratedExpression> orderList=null;
    Token t;
    int top=-1;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOP:{
      jj_consume_token(TOP);
      t = jj_consume_token(INTEGER_LITERAL);
top=(Integer.parseInt(t.image));
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DISTINCT:{
      jj_consume_token(DISTINCT);
distinct=true;
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    exprList = NamedExpressionList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FROM:{
      jj_consume_token(FROM);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        fromToken = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          fromAlias = jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        fromSelect = Select();
        jj_consume_token(RPAREN);
        fromAlias = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INNER:
    case LEFT:
    case RIGHT:
    case FULL:
    case CROSS:{
      joinList = JoinList();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
      where = Expression();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GROUP:{
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      groupByList = ExpressionList();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HAVING:{
      jj_consume_token(HAVING);
      having = Expression();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER:{
      jj_consume_token(ORDER);
      jj_consume_token(BY);
      orderList = OrderExpressionList();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
if(fromToken!=null){
            r.from(getIdentifierName(fromToken),getIdentifierName(fromAlias));
        }else if(fromSelect!=null){
            r.from(fromSelect,getIdentifierName(fromAlias));
        }
        if(where !=null){
            r.where(where);
        }
        if(exprList!=null){
            for(DecoratedExpression ns:exprList){
                r.field(ns.expression,ns.alias);
            }
        }
        if(orderList!=null){
            for(DecoratedExpression ns:orderList){
                r.orderBy(ns.expression,!ns.desc);
            }
        }
        if(joinList!=null){
            for(JoinCriteria ns:joinList){
                r.join(ns);
            }
        }
        if(groupByList!=null){
            for(Expression ns:groupByList){
                r.groupBy(ns);
            }
        }
        if(having!=null){
            r.having(having);
        }
        if(distinct){
            r.distinct();
        }
        r.top(top);
        {if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

//Exists Exists() :
//{
//    Expression expr=null;
//}
//{
//    <EXISTS>
//    <LPAREN>{
//        expr=Expression();
//    }
//    <RPAREN>
//    {
//        return new Exists(expr);
//    }
//}
  final public 
Update Update() throws ParseException {Update r=new Update();
    Token entityToken=null;
    Token fieldToken=null;
    Expression fieldValue=null;
    Expression where=null;
    jj_consume_token(UPDATE);
    entityToken = jj_consume_token(IDENTIFIER);
r.entity(getIdentifierName(entityToken));
    jj_consume_token(SET);
    fieldToken = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQ);
    fieldValue = Expression();
r.set(getIdentifierName(fieldToken),fieldValue);
    label_1:
    while (true) {
      if (jj_2_4(2147483647)) {
        ;
      } else {
        break label_1;
      }
      fieldToken = jj_consume_token(IDENTIFIER);
      jj_consume_token(EQ);
      fieldValue = Expression();
r.set(getIdentifierName(entityToken),fieldValue);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
      where = Expression();
r.where(where);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Delete Delete() throws ParseException {Delete r=new Delete();
    Token entityToken=null;
    Expression where=null;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    entityToken = jj_consume_token(IDENTIFIER);
r.from(getIdentifierName(entityToken));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
      where = Expression();
r.where(where);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public List<JoinCriteria> JoinList() throws ParseException {List<JoinCriteria> r=new ArrayList<JoinCriteria>();
    JoinCriteria r0;
    JoinCriteria ri;
    r0 = JoinDec();
r.add(r0);
    label_2:
    while (true) {
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_2;
      }
      ri = JoinDec();
r.add(ri);
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void JoinLookAhead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INNER:{
      jj_consume_token(INNER);
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
      break;
      }
    case FULL:{
      jj_consume_token(FULL);
      break;
      }
    case CROSS:{
      jj_consume_token(CROSS);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public JoinCriteria JoinDec() throws ParseException {JoinType type=JoinType.CROSS_JOIN;
    Expression condition=null;
    Token fromAlias=null;
    Token fromToken=null;
    Select fromSelect=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INNER:{
      jj_consume_token(INNER);
type=JoinType.INNER_JOIN;
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
type=JoinType.LEFT_JOIN;
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
type=JoinType.RIGHT_JOIN;
      break;
      }
    case FULL:{
      jj_consume_token(FULL);
type=JoinType.FULL_JOIN;
      break;
      }
    case CROSS:{
      jj_consume_token(CROSS);
type=JoinType.CROSS_JOIN;
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(JOIN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      fromToken = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        fromAlias = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      fromSelect = Select();
      jj_consume_token(RPAREN);
      fromAlias = jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ON:{
      jj_consume_token(ON);
      condition = Expression();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
{if ("" != null) return new JoinCriteria(type,
            (fromToken !=null)? (NameOrQuery)new EntityName(getIdentifierName(fromToken)):(NameOrQuery)fromSelect,
            getIdentifierName(fromAlias),
            condition
        );}
    throw new Error("Missing return statement in function");
  }

  final public List<DecoratedExpression> NamedExpressionList() throws ParseException {List<DecoratedExpression> r=new ArrayList<DecoratedExpression>();
    DecoratedExpression r0;
    DecoratedExpression ri;
    r0 = NamedExpression();
r.add(r0);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      ri = NamedExpression();
r.add(ri);
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public List<DecoratedExpression> OrderExpressionList() throws ParseException {List<DecoratedExpression> r=new ArrayList<DecoratedExpression>();
    DecoratedExpression r0;
    DecoratedExpression ri;
    r0 = OrderExpression();
r.add(r0);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      ri = OrderExpression();
r.add(ri);
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public DecoratedExpression OrderExpression() throws ParseException {DecoratedExpression r=new DecoratedExpression();
    boolean orderDesc=false;
    r.expression = Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DESC:
    case ASC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESC:{
        jj_consume_token(DESC);
orderDesc=true;
        break;
        }
      case ASC:{
        jj_consume_token(ASC);
orderDesc=false;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
r.desc=orderDesc;
        {if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public DecoratedExpression NamedExpression() throws ParseException {DecoratedExpression r=new DecoratedExpression();
    Token t=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:{
      jj_consume_token(STAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
Star p=new Star();
        Var v;
        if(t!=null){
            v=new Var(p,getIdentifierName(t));
            r.expression=v;
        }else{
            r.expression=p;
        }
        {if ("" != null) return r;}
      break;
      }
    case IF:
    case TRUE:
    case FALSE:
    case NULL:
    case NOT:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case TILDE:
    case COLON:
    case PLUS:
    case MINUS:{
      r.expression = Expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
if(t!=null){
            r.alias=getIdentifierName(t);
        }
        {if ("" != null) return r;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Expression> ExpressionList() throws ParseException {List<Expression> r=new ArrayList<Expression>();
    Expression r0;
    Expression ri;
    r0 = ExpressionOrSelect();
r.add(r0);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      ri = ExpressionOrSelect();
r.add(ri);
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionOrSelect() throws ParseException {Expression r;
    if (jj_2_6(2147483647)) {
      r = Select();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case TRUE:
      case FALSE:
      case NULL:
      case NOT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case TILDE:
      case COLON:
      case PLUS:
      case MINUS:{
        r = Expression();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {Expression r;
    //        LOOKAHEAD(<SELECT>)
    //        (
    //            r=Select()
    //        )
    //        |
    //        LOOKAHEAD(<EXISTS>)
    //        (
    //            r=Exists()
    //        )
    //        |
            r = OrExpression();
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Expression OrExpression() throws ParseException {Expression left;
    Expression right=null;
    left = AndExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:
      case SC_OR:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case SC_OR:{
        jj_consume_token(SC_OR);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = AndExpression();
left=new Or(left,right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {Expression left;
    Expression right=null;
    left = CompExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case SC_AND:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case SC_AND:{
        jj_consume_token(SC_AND);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = CompExpression();
left=new And(left,right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression CompExpression() throws ParseException {Expression r;
    Expression n;
    BinaryOperator op;
    List<Expression> parameters=null;
    r = PlusExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIKE:
    case IN:
    case EQ2:
    case GT:
    case LT:
    case EQ:
    case LE:
    case GE:
    case NE:
    case NE2:{
      if (jj_2_7(2147483647)) {
        jj_consume_token(IN);
        jj_consume_token(LPAREN);
        parameters = ExpressionList();
        jj_consume_token(RPAREN);
if(parameters.size()==1 && parameters.get(0) instanceof Select){
                    r=new InSelection(r,(Select)parameters.get(0));
                }else{
                    r=new InCollection(r,parameters);
                }
                parameters=null;
      } else if (jj_2_8(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
op=BinaryOperator.EQ;
          break;
          }
        case EQ2:{
          jj_consume_token(EQ2);
op=BinaryOperator.EQ;
          break;
          }
        case NE:{
          jj_consume_token(NE);
op=BinaryOperator.DIFF;
          break;
          }
        case NE2:{
          jj_consume_token(NE2);
op=BinaryOperator.DIFF;
          break;
          }
        case LT:{
          jj_consume_token(LT);
op=BinaryOperator.LT;
          break;
          }
        case LE:{
          jj_consume_token(LE);
op=BinaryOperator.LE;
          break;
          }
        case GT:{
          jj_consume_token(GT);
op=BinaryOperator.GT;
          break;
          }
        case GE:{
          jj_consume_token(GE);
op=BinaryOperator.GE;
          break;
          }
        case LIKE:{
          jj_consume_token(LIKE);
op=BinaryOperator.LIKE;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n = PlusExpression();
switch(op){
                case EQ: { r=new Equals(r,n); break;}
                case DIFF: { r=new Different(r,n); break;}
                case LT: { r=new LessThan(r,n); break;}
                case LE: { r=new LessEqualThan(r,n); break;}
                case GT: { r=new GreaterThan(r,n); break;}
                case GE: { r=new GreaterEqualThan(r,n); break;}
                case LIKE: { r=new Like(r,n); break;}
            }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PlusExpression() throws ParseException {Expression left;
    Expression right;
    BinaryOperator op;
    left = MulExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
op=BinaryOperator.PLUS;
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
op=BinaryOperator.MINUS;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = MulExpression();
switch(op){
                case PLUS: { left=new Plus(left,right);break;}
                case MINUS: { left=new Minus(left,right);break;}
            }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MulExpression() throws ParseException {Expression left;
    Expression right;
    BinaryOperator op;
    left = PowExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SLASH:{
        jj_consume_token(SLASH);
op=BinaryOperator.DIV;
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
op=BinaryOperator.MUL;
        break;
        }
      case REM:{
        jj_consume_token(REM);
op=BinaryOperator.REM;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = PowExpression();
switch(op){
                case DIV: { left=new Div(left,right); break;}
                case MUL: { left=new Mul(left,right); break;}
                case REM: { left=new Reminder(left,right); break;}
            }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PowExpression() throws ParseException {Expression left;
    Expression right;
    BinaryOperator op;
    left = PrimaryExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:{
        jj_consume_token(BIT_AND);
op=BinaryOperator.BIT_AND;
        break;
        }
      case BIT_OR:{
        jj_consume_token(BIT_OR);
op=BinaryOperator.BIT_OR;
        break;
        }
      case XOR:{
        jj_consume_token(XOR);
op=BinaryOperator.XOR;
        break;
        }
      case LSHIFT:{
        jj_consume_token(LSHIFT);
op=BinaryOperator.LSHIFT;
        break;
        }
      case RSIGNEDSHIFT:{
        jj_consume_token(RSIGNEDSHIFT);
op=BinaryOperator.RSHIFT;
        break;
        }
      case RUNSIGNEDSHIFT:{
        jj_consume_token(RUNSIGNEDSHIFT);
op=BinaryOperator.URSHIFT;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = PrimaryExpression();
switch(op){
                case BIT_AND: { left=new BitAnd(left,right);break;}
                case BIT_OR: { left=new BitOr(left,right);break;}
                case XOR: { left=new XOr(left,right);break;}
                case LSHIFT: { left=new LShift(left,right);break;}
                case RSHIFT: { left=new RShift(left,right);break;}
                case URSHIFT: { left=new URShift(left,right);break;}
            }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Param() throws ParseException {Token t=null;
    jj_consume_token(COLON);
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Param(getIdentifierName(t));}
    throw new Error("Missing return statement in function");
  }

  final public Expression VarOrFunction() throws ParseException {Token t=null;
    Token start;
    boolean fct=false;
    boolean indexer=false;
    List<Expression> parameters=null;
    List<String> vars=new ArrayList<String>();
    start = jj_consume_token(IDENTIFIER);
    if (jj_2_9(2147483647)) {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:
      case IF:
      case TRUE:
      case FALSE:
      case NULL:
      case NOT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case TILDE:
      case COLON:
      case PLUS:
      case MINUS:{
        parameters = ExpressionList();
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
fct=true;
    } else if (jj_2_10(2147483647)) {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:
      case IF:
      case TRUE:
      case FALSE:
      case NULL:
      case NOT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case TILDE:
      case COLON:
      case PLUS:
      case MINUS:{
        parameters = ExpressionList();
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
indexer=true;
    } else {
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_11;
        }
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          t = jj_consume_token(IDENTIFIER);
vars.add(getIdentifierName(t));
          break;
          }
        case STAR:{
          t = jj_consume_token(STAR);
vars.add(getIdentifierName(t));
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
if(fct){
              {if ("" != null) return FunctionFactory.createFunction(getIdentifierName(start),parameters==null?new ArrayList<Expression>():parameters);}
        }else if(indexer){
            if(parameters==null){
                parameters=new ArrayList<Expression>();
            }

            Var v=new IndexedVar(getIdentifierName(start),parameters.toArray(new Expression[parameters.size()]));
            for(String s:vars){
                v=new Var(v,s);
            }
            {if ("" != null) return v;}
        }else{
            Var v=new Var(getIdentifierName(start));
            for(String s:vars){
                v=new Var(v,s);
            }
            {if ("" != null) return v;}
        }
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {Expression r;
    boolean isMinus=false;
    boolean isNot=false;
    boolean isTilde=false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      if (jj_2_11(2147483647)) {
        r = Select();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case TRUE:
        case FALSE:
        case NULL:
        case NOT:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case TILDE:
        case COLON:
        case PLUS:
        case MINUS:{
          r = Expression();
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
isMinus=true;
      r = PrimaryExpression();
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      r = Expression();
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
isNot=true;
      r = PrimaryExpression();
      break;
      }
    case TILDE:{
      jj_consume_token(TILDE);
isTilde=true;
      r = PrimaryExpression();
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      if (jj_2_12(2147483647)) {
        r = Param();
      } else if (jj_2_13(2147483647)) {
        r = If();
      } else if (jj_2_14(2147483647)) {
        r = Literal();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          r = VarOrFunction();
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
if(isMinus){
            r=new Negative(r);
        } if(isNot){
            r=new Not(r);
        } if(isTilde){
            r=new Complement(r);
        }
        {if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {Literal r;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
r=new Literal(Integer.parseInt(t.image));
      break;
      }
    case FLOATING_POINT_LITERAL:{
      t = jj_consume_token(FLOATING_POINT_LITERAL);
r=new Literal(Double.parseDouble(t.image));
      break;
      }
    case CHARACTER_LITERAL:{
      t = jj_consume_token(CHARACTER_LITERAL);
r=new Literal(getStringLiteral(t));
      break;
      }
    case STRING_LITERAL:{
      t = jj_consume_token(STRING_LITERAL);
r=new Literal(getStringLiteral(t));
      break;
      }
    case TRUE:
    case FALSE:{
      r = BooleanLiteral();
      break;
      }
    case NULL:{
      r = NullLiteral();
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Literal BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new Literal(true);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new Literal(false);}
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal NullLiteral() throws ParseException {
    jj_consume_token(NULL);
{if ("" != null) return new Literal(null,null);}
    throw new Error("Missing return statement in function");
  }

//
// switch v case x then X case y then Y else Z
//
  final public 
Expression Switch() throws ParseException {Expression e;
    List<Expression> expressions=new ArrayList<Expression>();
    jj_consume_token(SWITCH);
    e = Expression();
expressions.add(e);
    jj_consume_token(CASE);
    e = Expression();
expressions.add(e);
    jj_consume_token(THEN);
    e = Expression();
expressions.add(e);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_12;
      }
      jj_consume_token(CASE);
      e = Expression();
expressions.add(e);
      jj_consume_token(THEN);
      e = Expression();
expressions.add(e);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      e = Expression();
expressions.add(e);
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(END);
{if ("" != null) return new Decode(expressions);}
    throw new Error("Missing return statement in function");
  }

  final public Expression If() throws ParseException {Expression e;
    List<Expression> expressions=new ArrayList<Expression>();
    jj_consume_token(IF);
    e = Expression();
expressions.add(e);
    jj_consume_token(THEN);
    e = Expression();
expressions.add(e);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSEIF:{
        ;
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        break label_13;
      }
      jj_consume_token(ELSEIF);
      e = Expression();
expressions.add(e);
      jj_consume_token(THEN);
      e = Expression();
expressions.add(e);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      e = Expression();
expressions.add(e);
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(END);
{if ("" != null) return new If(expressions);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Function() throws ParseException {Token t;
    List<Expression> parameters;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    parameters = ExpressionList();
    jj_consume_token(RPAREN);
{if ("" != null) return FunctionFactory.createFunction(getIdentifierName(t),parameters);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public UQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c08000,0x0,0x0,0x0,0x0,0x800,0xc0000000,0x1000,0x4000000,0x0,0x2000000,0x1000,0x1000,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x30000000,0x30000000,0x0,0x0,0x1c08000,0x0,0x1c08000,0x4000,0x4000,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c08040,0x1c08040,0x0,0x0,0x1c08000,0x0,0x0,0x1c00000,0xc00000,0x40000,0x80000,0x100000,0x80000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4e8840,0x400,0x200,0x80000,0x480000,0x0,0x7,0x0,0x0,0x10,0x0,0x0,0x0,0x7,0x7,0x80000,0x480000,0x20,0x20000000,0x20000000,0x0,0x0,0x40000000,0x80000,0x4e8840,0x20000000,0x4e8840,0x0,0x0,0x0,0x0,0x80000080,0x80000180,0x0,0x0,0x0,0x0,0x0,0x0,0x4e8840,0x4e8840,0x40000000,0x80000,0x4e8840,0x400040,0x80000,0x68800,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x18028,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38028,0x0,0x18028,0x800,0x800,0x1000,0x1000,0x7c3,0x7c3,0x18000,0x18000,0x460000,0x460000,0x3b80000,0x3b80000,0x18028,0x18028,0x0,0x20000,0x18028,0x18008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public UQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public UQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public UQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new UQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public UQLParser(UQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(UQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[90];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }


}
